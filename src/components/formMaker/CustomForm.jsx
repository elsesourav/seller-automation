import { useState } from "react";
import { makeSchemaWithWidths } from "./formUtils";
import {
   DateInput,
   MultipleInput,
   NumberInput,
   SelectInput,
   SpaceBar,
   TextArea,
   TextInput,
   TitleBar,
} from "../inputs";


/**
 * CustomForm - Render a form from a schema (as generated by FormMaker)
 * Props:
 *   schema: { schema, widths } object (from FormMaker) or flat array
 *   onSubmit: function(formData) - called with form data on submit
 */
const CustomForm = ({ schema: schemaProp, onSubmit }) => {
   const [formData, setFormData] = useState({});

   // Accept either { schema, widths } or a flat array
   let schemaObj;
   if (Array.isArray(schemaProp)) {
      schemaObj = makeSchemaWithWidths(schemaProp);
   } else if (
      schemaProp &&
      Array.isArray(schemaProp.schema) &&
      Array.isArray(schemaProp.widths)
   ) {
      schemaObj = schemaProp;
   } else {
      schemaObj = null;
   }

   if (!schemaObj) {
      return <div className="text-gray-400">No form schema provided.</div>;
   }
   const schema = schemaObj.schema;
   const widths = schemaObj.widths;

   // Helper: get Tailwind col-span class for 4-section grid
   const getColSpan = (width) => {
      switch (width) {
         case "fourth":
            return "col-span-1";
         case "half":
            return "col-span-2";
         case "three-fourths":
            return "col-span-3";
         case "full":
         default:
            return "col-span-4";
      }
   };

   // Render a single field using the correct input component
   const renderField = (field) => {
      const commonProps = {
         label: field.label,
         value: formData[field.name] || (field.type === "multiple" ? [] : ""),
         onChange: (value) => handleChange(field.name, value),
         placeholder: field.placeholder,
         required: field.required,
         helperText: field.helperText,
         width: "w-full",
         options: field.options,
         min: field.min,
         max: field.max,
         step: field.step,
         disabled: field.disabled,
      };
      switch (field.type) {
         case "title":
            return <TitleBar value={field.label} width="w-full" />;
         case "text":
            return <TextInput {...commonProps} />;
         case "number":
            return <NumberInput {...commonProps} />;
         case "date":
            return <DateInput {...commonProps} />;
         case "select":
            return <SelectInput {...commonProps} />;
         case "multiple":
            return <MultipleInput {...commonProps} fieldType="select" />;
         case "spacer":
            return <SpaceBar {...commonProps} />;
         case "textarea":
            return <TextArea {...commonProps} />;
         default:
            return null;
      }
   };

   const handleChange = (name, value) => {
      setFormData((prev) => ({ ...prev, [name]: value }));
   };

   const handleSubmit = (e) => {
      e.preventDefault();
      if (onSubmit) onSubmit(formData);
   };

   // Use widths to render rows/columns as in builder
   let rows = [];
   let fieldIdx = 0;
   rows = widths.map((rowWidths) => {
      const rowFields = rowWidths.map((width) => {
         const field = schema[fieldIdx];
         fieldIdx++;
         return { ...field, width };
      });
      return rowFields;
   });

   return (
      <form onSubmit={handleSubmit} className="flex flex-col">
         <div className="relative w-full flex flex-col gap-3">
            {rows.map((row, rowIdx) => (
               <div key={rowIdx} className="grid grid-cols-4 h-22 gap-4">
                  {row.map((field, colIdx) => (
                     <div
                        key={field.id || field.name || `${rowIdx}-${colIdx}`}
                        className={getColSpan(field.width)}
                     >
                        {renderField(field)}
                     </div>
                  ))}
               </div>
            ))}
            {schema.length > 0 && (
               <div className="pt-4">
                  <button
                     type="submit"
                     className="w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-all cursor-pointer"
                  >
                     Submit
                  </button>
               </div>
            )}
         </div>
      </form>
   );
};

export default CustomForm;
